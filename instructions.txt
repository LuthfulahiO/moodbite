Complete this NextJS application that matches food recommendations to users' moods and contexts, with focus on recommendation storage and simplified onboarding. Core dependencies installed:
- LangChain with OpenAI Chat
- Zustand with persist middleware
- Basic UI components and partial onboarding flow

Technical Requirements:

1. Simplified Onboarding Flow:
- Implement a focused multi-step form collecting only essential data:
  * Dietary restrictions/preferences (vegetarian, vegan, allergies)
  * Typical meal budget range
  * Location permission for weather/local context
  * Any health-related restrictions
  * Skip complex preference gathering to reduce friction

2. Enhanced State Management:
- Create persistent Zustand store with:
  ```typescript
  interface FoodStore {
    savedMeals: {
      id: string;
      name: string;
      timestamp: Date;
      mood: string;
      context: {
        weather: string;
        timeOfDay: string;
        location?: string;
      };
    }[];
    userPreferences: {
      dietary: string[];
      budgetRange: {
        min: number;
        max: number;
      };
      healthRestrictions: string[];
    };
    addSavedMeal: (meal: Meal) => void;
    removeSavedMeal: (id: string) => void;
  }

  Implement persistence middleware:

Store saved meals locally
Preserve user preferences
Handle storage limit cases




AI Recommendation System:


Enhance OpenAI integration to:

Process natural language mood inputs
Consider context factors:

Current weather
Time of day
Dietary restrictions
Local food availability


Return structured food suggestions with rationale
No requirement for historical data on first use




API Routes:


POST /api/mood-recommendations

Input: mood description, current context, user preferences
Output: ranked food suggestions with explanation


PUT /api/save-meal

Store selected meal with context


GET /api/saved-meals

Retrieve user's saved meal history


DELETE /api/saved-meal/:id

Remove saved meal




Enhanced UI Components:


Mood input interface with suggested prompts
Weather and context display
Recommendation cards with:

Food suggestion
Mood matching explanation
Save button
"Why this recommendation?" explanation


Saved meals view with:

Chronological list of saved meals
Context when saved (mood, weather, etc.)
Delete option
Filter/search capabilities




Data Models:

typescriptCopytype Meal = {
  id: string;
  name: string;
  description: string;
  moodMatch: string;
  weatherContext?: string;
  timeContext?: string;
  savedAt?: Date;
};

type UserPreferences = {
  dietary: string[];
  budgetRange: {
    min: number;
    max: number;
  };
  healthRestrictions: string[];
};
Core User Flows:

First-time user:

Complete minimal onboarding
Enter mood
Get recommendations
Save preferred options


Returning user:

View saved meals
Enter new mood
Get contextual recommendations
Save new selections



Expected Output:

Complete application code with TypeScript
API implementations
Zustand store with persistence
OpenAI prompt templates
Error handling
Loading states
Saved meals management
Local storage integration

UI/UX Requirements:

Clean, minimal onboarding
Quick mood input
Easy meal saving
Accessible saved meals history
Clear loading states
Offline capability for viewing saved meals

Note: Focus on making the first-time user experience frictionless while building a valuable personalized experience through saved meals over time.
